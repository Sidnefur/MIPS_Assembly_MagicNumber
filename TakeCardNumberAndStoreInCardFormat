#Card 1
#0 0 0 0 0 1 AND
#1, 2, 3, 4, 5,…  in binary = 
#_ _ _ _ _ _ until limit reached (63 bit)

#$s0 – cards displayed bits
#$s1 – the number
#$a1 – card bit to pass to subroutine for generating the card
#-	Random num



#What I want to do:
#Take the randomly generated card in $a1
#Copy and covert the bit to the “card bit-by-bit” format
#Store into $s0

li $s0, 1
li $a1, 4

move $t1, $a1
#Holds the random value
li $t2, 1
#Holds the incremented varaible
li $t3, 1
#Holds the "card generated" bit representation variable

shiftLoop:
	beq $t1, $t2, generateDisplay
	#if increment equals card random value, break from loop
	addi $t2, $t2, 1
	#increments by 1 each , the counter
	sll $t3, $t3, 1
	#increments "card used" representation
	j shiftLoop
	
	
generateDisplay:
	or $s0, $s0, $t3
